import { gun, user, DAPP_NAME } from '../useGun.js';
import { hashText } from '../crypto/index.js';

/**
 * Creates a new note in the system, either public or private.
 *
 * @async
 * @function createNote
 * @param {string} title - The title of the note
 * @param {string} author - The author name/identifier for the note
 * @param {string} content - The main content/body of the note
 * @param {boolean} isPublic - Flag indicating if note should be public (true) or private (false)
 * @returns {Promise<string>} A promise that resolves to the unique hash identifier of the created note
 * @throws {Error} Throws error if attempting to create private note without authentication
 *
 * @description
 * This function creates a new note with the provided details. For private notes,
 * the content is encrypted before storage. Public notes are stored unencrypted.
 * The note's unique identifier is generated by hashing the title and content.
 *
 * @example
 * // Create a public note
 * const publicHash = await createNote(
 *   "My Public Note",
 *   "John Doe",
 *   "Hello World!",
 *   true
 * );
 *
 * // Create a private note
 * const privateHash = await createNote(
 *   "My Private Note",
 *   "John Doe",
 *   "Secret content",
 *   false
 * );
 */
const createNote = async (title, author, content, isPublic) => {
  if (!isPublic && !user.is) {
    throw new Error("L'utente deve essere autenticato per creare note private");
  }

  if (
    typeof title !== 'string' ||
    typeof author !== 'string' ||
    typeof content !== 'string'
  ) {
    throw new Error('I campi title, author e content devono essere stringhe');
  }

  const hash = await hashText(
    JSON.stringify({ title, content, lastUpdated: new Date().toISOString() })
  );

  if (isPublic) {
    const publicNoteData = {
      title: title,
      author: author,
      content: content,
      lastUpdated: new Date().toISOString(),
      isPublic: true,
      id: hash,
    };

    if (
      !publicNoteData.title ||
      !publicNoteData.author ||
      !publicNoteData.content
    ) {
      throw new Error('Tutti i campi sono obbligatori per le note pubbliche');
    }

    await gun.get(DAPP_NAME).get('public-notes').get(hash).put(publicNoteData);
  } else {
    const privateNoteData = {
      title: title,
      author: author,
      content: content,
      lastUpdated: new Date().toISOString(),
      isPublic: false,
      id: hash,
    };

    await user
      .get(DAPP_NAME)
      .get('private-notes')
      .get(hash)
      .put(privateNoteData);
  }

  return hash;
};

export default createNote;
